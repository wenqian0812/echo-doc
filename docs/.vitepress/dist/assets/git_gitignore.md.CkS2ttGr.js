import{_ as s,c as i,o as a,a2 as n}from"./chunks/framework.mlmjWbz3.js";const F=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"git/gitignore.md","filePath":"git/gitignore.md"}'),t={name:"git/gitignore.md"},e=n(`<h2 id="_1、给项目添加-gitignore" tabindex="-1">1、给项目添加.gitignore <a class="header-anchor" href="#_1、给项目添加-gitignore" aria-label="Permalink to &quot;1、给项目添加.gitignore&quot;">​</a></h2><p>.gitignore可以忽略你不想上传的文件，比如doc,target,classes等等</p><p>只需要在.git同目录下新增.gitignore文件，然后添加不需要上次的目录即可，比如</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/venv</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.idea</span></span></code></pre></div><p>2、清除已经上传的多余文件 如果你添加.gitignore的时候，git里面已经上传了很多不需要的文件，则使用下面两个命令干掉他们 如果是文件夹：git rm -r --cached 文件夹名 如果是文件：git rm --cached 文件名</p><h2 id="如果已经上传" tabindex="-1">如果已经上传 <a class="header-anchor" href="#如果已经上传" aria-label="Permalink to &quot;如果已经上传&quot;">​</a></h2><p>如果之前忘记定义 .gitignore 文件，执行了 git add . 命令之后， 发现加入的文件太多了，想要定义 .gitignore 并重新存储更改的文件。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 清除记录的所有文件管理信息，注意行末的点表示当前目录，一定要写</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm -r --cached .</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 添加该仓库的所有文件，注意行末的点表示当前目录，一定要写</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add .</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 提交注释</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit -m &quot;.....&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 推送到仓库</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push -u origin master</span></span></code></pre></div><h2 id="git删除远程仓库的文件或目录" tabindex="-1">git删除远程仓库的文件或目录 <a class="header-anchor" href="#git删除远程仓库的文件或目录" aria-label="Permalink to &quot;git删除远程仓库的文件或目录&quot;">​</a></h2><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#删除mydir目录</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm -r --cached mydir</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#删除mydir目录下的hello.txt文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm -r --cached mydir/hello.txt</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit -m &quot;删除说明&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 推送</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span></span></code></pre></div><p>用-r参数删除目录, git rm --cached hello.txt 删除的是仓库中的文件，且本地工作区的文件会保留且不再与远程仓库发生跟踪关系，如果本地仓库中的文件也要删除则用git rm hello.txt</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update-index --assume-unchanged  .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">omponents.d.ts</span></span></code></pre></div>`,12),l=[e];function p(h,r,g,k,d,c){return a(),i("div",null,l)}const y=s(t,[["render",p]]);export{F as __pageData,y as default};
